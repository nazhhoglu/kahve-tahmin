# -*- coding: utf-8 -*-
"""dataset_ozellikleri.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18cUOg-E7p7e51tMahSjNxeahclDTeaea
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv("worldwide_coffee_habits.csv")

df

print(df.info())



df.head()

df.dtypes

df.columns

df.isnull().sum()



sns.heatmap(df.isnull(), cbar=False)

df = pd.get_dummies(df, columns=["Country", "Type of Coffee Consumed"])

df.dtypes

X = df.drop("Coffee Consumption (kg per capita per year)", axis=1)
y = df["Coffee Consumption (kg per capita per year)"]

"""girdi ve çıktı değişkenlerini ayırdık"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""veriyi eğitim ve test olarak böldük."""

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

print("MAE:", mean_absolute_error(y_test, y_pred))
print("RMSE:", mean_squared_error(y_test, y_pred, squared=False))
print("R²:", r2_score(y_test, y_pred))

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np # Import numpy

print("MAE:", mean_absolute_error(y_test, y_pred))
# Calculate RMSE by taking the square root of MSE
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred)))
print("R²:", r2_score(y_test, y_pred))

print("Tahminler:", y_pred)
print("Gerçek Değerler:", y_test.values)

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np

rf_model = RandomForestRegressor(random_state=42)
rf_model.fit(X_train, y_train)

y_pred_rf = rf_model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred_rf)
rmse = np.sqrt(mean_squared_error(y_test, y_pred_rf))
r2 = r2_score(y_test, y_pred_rf)

print("Random Forest Sonuçları:")
print("MAE:", mae)
print("RMSE:", rmse)
print("R²:", r2)

print("Tahminler:", y_pred_rf[:10])
print("Gerçek Değerler:", y_test.values[:10])


from xgboost import XGBRegressor

xgb_model = XGBRegressor(random_state=42)
xgb_model.fit(X_train, y_train)

y_pred_xgb = xgb_model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred_xgb)
rmse = np.sqrt(mean_squared_error(y_test, y_pred_xgb))
r2 = r2_score(y_test, y_pred_xgb)

print("XGBoost Sonuçları:")
print("MAE:", mae)
print("RMSE:", rmse)
print("R²:", r2)

df = df.drop("Country", axis=1)

if "Country" in df.columns:
    df = df.drop("Country", axis=1)

df.dtypes

df = df.loc[:, ~df.columns.str.startswith("Country_")]

df.dtypes

X = df.drop("Coffee Consumption (kg per capita per year)", axis=1)
y = df["Coffee Consumption (kg per capita per year)"]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X_train, y_train)

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np

y_pred = model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print("MAE:", mae)
print("RMSE:", rmse)
print("R²:", r2)

import seaborn as sns
import matplotlib.pyplot as plt

# Sadece sayısal sütunlar
numeric_df = df.select_dtypes(include=['float64', 'int64'])

# Korelasyon matrisi
corr = numeric_df.corr()

# Isı haritası
plt.figure(figsize=(8, 6))
sns.heatmap(corr, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Korelasyon Matrisi")
plt.show()

df['Log_Average Coffee Price'] = np.log1p(df['Average Coffee Price (USD per kg)'])
df['Log_Population'] = np.log1p(df['Population (millions)'])

df.loc[:, 'Log_Average Coffee Price'] = np.log1p(df['Average Coffee Price (USD per kg)'])
df.loc[:, 'Log_Population'] = np.log1p(df['Population (millions)'])

df = df.drop([col for col in df.columns if col.startswith("Country_")], axis=1)

import pandas as pd

# Assuming your data is in 'worldwide_coffee_habits.csv'
df = pd.read_csv('worldwide_coffee_habits.csv')

# Now you can drop the columns
df = df.drop([col for col in df.columns if col.startswith("Country_")], axis=1)

df["Year_Difference"] = df["Year"] - df["Year"].min()

df = df.drop(["Year", "Population (millions)", "Average Coffee Price (USD per kg)"], axis=1)

df = df.drop([col for col in df.columns if col.startswith("Country_")], axis=1)

df = df.drop(["Average Coffee Price (USD per kg)", "Population (millions)"], axis=1)

print(df.columns)

